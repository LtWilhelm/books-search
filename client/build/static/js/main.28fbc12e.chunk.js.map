{"version":3,"sources":["components/NavBar.jsx","components/Book.jsx","util/booksAPI.js","components/Jumbotron.jsx","pages/Search.jsx","pages/Saved.jsx","pages/Home.jsx","App.jsx","registerServiceWorker.js","index.js"],"names":["NavBar","className","href","this","props","location","Component","Book","src","image","alt","title","author","description","target","rel","link","document","pathname","onClick","click","synopsis","axios","require","booksAPI","searchBook","query","trim","replace","get","saveBook","body","post","getSaved","Jumbotron","Search","state","books","search","then","res","console","log","data","items","setState","catch","err","handleInputChange","event","name","value","handleSearch","preventDefault","save","result","onChange","type","style","marginBottom","map","book","key","id","volumeInfo","imageLinks","thumbnail","authors","join","infoLink","Saved","marginTop","filter","toLowerCase","indexOf","_id","Home","to","role","App","path","exact","component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.28fbc12e.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass NavBar extends Component {\r\n\r\n    render(){\r\n        return (\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                <a className=\"navbar-brand\" href=\"/\">Google Books</a>\r\n                <ul className=\"nav navbar-dark\">\r\n                    <li className=\"nav-item\">\r\n                        <a className={\"nav-link \" + (this.props.location === \"/search\" ? \"active\" : \"\")} href=\"/search\">Search</a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <a className={\"nav-link \" + (this.props.location === \"/saved\" ? \"active\" : \"\")} href=\"/saved\">Saved</a>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React, {Component} from 'react';\r\n\r\nclass Book extends Component {\r\n    render() {\r\n        return(\r\n        <div className=\"card col-4\">\r\n            <img className=\"card-img-top\" src={this.props.image} alt=\"book cover\" />\r\n            <div className=\"card-body\">\r\n                <h4 className=\"card-title\">{this.props.title}</h4>\r\n                <h5 className=\"card-title\">By: {this.props.author || 'No author listed'}</h5>\r\n                <p className=\"card-text\">{this.props.description}</p>\r\n                <a className=\"btn btn-secondary\" target=\"_blank\" rel=\"noopener noreferrer\" href={this.props.link}>View Book</a>\r\n                {document.location.pathname === '/search' && <button className=\"btn btn-primary ml-1\" onClick={() => this.props.click({\r\n                    image: this.props.image,\r\n                    title: this.props.title,\r\n                    author: this.props.author,\r\n                    synopsis: this.props.description\r\n                })}>Save Book</button>}\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Book;","const axios = require('axios');\r\n\r\nconst queryURL = \"https://www.googleapis.com/books/v1/volumes?q=\"\r\nconst booksAPI = {\r\n    searchBook: function(query) {\r\n        query = query.trim().replace(/\\s/g, \"+\");\r\n        return axios.get(queryURL + query);\r\n    },\r\n    saveBook: function(body) {\r\n        return axios.post('/api/addbook', body);\r\n    },\r\n    getSaved: function() {\r\n        return axios.get('/api/books');\r\n    }\r\n}\r\n\r\nexport default booksAPI;","import React, { Component } from 'react';\r\n\r\nclass Jumbotron extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"jumbotron jumbotron-fluid\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"display-3\">Google Books Search</h1>\r\n                    <p className=\"lead\">Search Google Books for your favorite titles to add them to your reading list</p>\r\n                    <hr className=\"my-2\" />\r\n                    <p>To get started, simply use the search bar below!</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Jumbotron;","import React, { Component } from 'react';\r\nimport Book from '../components/Book';\r\nimport booksAPI from '../util/booksAPI';\r\nimport Jumbotron from '../components/Jumbotron';\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        books: [],\r\n        search: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.search()\r\n        \r\n    }\r\n\r\n    search = () => {\r\n        booksAPI.searchBook(this.state.search)\r\n            .then(res => {\r\n                console.log(res.data.items)\r\n                this.setState({ books: (res.data.items) });\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    handleInputChange = event => {\r\n        const { name, value } = event.target;\r\n\r\n        this.setState({[name]: value });\r\n    }\r\n\r\n    handleSearch = event => {\r\n        event.preventDefault();\r\n        this.search();\r\n    }\r\n\r\n    save = body => {\r\n        booksAPI.saveBook(body)\r\n        .then((result) => {\r\n            console.log(result)\r\n        }).catch((err) => {\r\n            console.log(err)\r\n        });;\r\n        console.log('saved?')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <Jumbotron />\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <form>\r\n                        <input onChange={this.handleInputChange} className=\"form-control\" name=\"search\" type=\"text\" value={this.state.search} \r\n                        style={{\r\n                            marginBottom: '.3em'\r\n                        }} />\r\n                        <button onClick={this.handleSearch} className=\"btn btn-primary\"\r\n                        style={{\r\n                            marginBottom: '1em'\r\n                        }}>\r\n                            Search\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n                <div className=\"row\">\r\n                    {this.state.books && this.state.books.map(book => <Book key={book.id} image={book.volumeInfo.imageLinks ? book.volumeInfo.imageLinks.thumbnail : null} title={book.volumeInfo.title} description={book.volumeInfo.description} author={book.volumeInfo.authors && book.volumeInfo.authors.join(\", \")} link={book.volumeInfo.infoLink} click={this.save} />)}\r\n                </div>\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search;","import React, {Component} from 'react';\r\nimport booksAPI from '../util/booksAPI';\r\nimport Book from '../components/Book';\r\nimport Jumbotron from '../components/Jumbotron';\r\n\r\nclass Saved extends Component {\r\n    state = {\r\n        books: [],\r\n        search: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        booksAPI.getSaved()\r\n            .then(result => {\r\n                console.log(result)\r\n                this.setState({books: result.data});\r\n            })\r\n    }\r\n\r\n    handleInputChange = event => {\r\n        const { name, value } = event.target;\r\n\r\n        this.setState({[name]: value });\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n            <div className=\"row\"\r\n            style={{\r\n                marginBottom: '1em',\r\n                marginTop: '1em'\r\n            }}>\r\n                <form>\r\n                    <input onChange={this.handleInputChange} className=\"form-control\" name=\"search\" type=\"text\" value={this.state.search} />\r\n                </form>\r\n            </div>\r\n            <div className=\"row\">\r\n                {this.state.books && (this.state.search ? this.state.books.filter(book => (book.title.toLowerCase().indexOf(this.state.search) !== -1)).map(book => <Book key={book._id} image={book.image} title={book.title} description={book.description} author={book.author.join(\", \")} link={book.infoLink} />):\r\n                this.state.books.map(book => <Book key={book._id} image={book.image} title={book.title} description={book.description} author={book.authors && book.authors.join(\", \")} link={book.infoLink} />))}\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Saved;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Home () {\r\n    return (\r\n        <div className=\"jumbotron\">\r\n            <h1 className=\"display-3\">Google Books Search</h1>\r\n            <p className=\"lead\">Welcome to Google Books Search</p>\r\n            <hr className=\"my-2\" />\r\n            <p>Continue to the search page to search for books</p>\r\n            <p className=\"lead\">\r\n                <Link className=\"btn btn-primary btn-lg\" to=\"/search\" role=\"button\">Search</Link>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, { Component } from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport \"./App.css\";\n\nimport NavBar from './components/NavBar';\nimport Search from './pages/Search';\nimport Saved from './pages/Saved';\nimport Home from './pages/Home';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <NavBar location={document.location.pathname} />\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/search\" component={Search} />\n          <Route path=\"/saved\" component={Saved} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}